// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2015 22:20:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DE2_115_Default
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DE2_115_Default_vlg_sample_tst(
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACLRCK,
	CLOCK2_50,
	CLOCK3_50,
	CLOCK_50,
	DRAM_DQ,
	EEP_I2C_SDAT,
	ENET0_INT_N,
	ENET0_LINK100,
	ENET0_MDIO,
	ENET0_RX_CLK,
	ENET0_RX_COL,
	ENET0_RX_CRS,
	ENET0_RX_DATA,
	ENET0_RX_DV,
	ENET0_RX_ER,
	ENET0_TX_CLK,
	ENET1_INT_N,
	ENET1_LINK100,
	ENET1_MDIO,
	ENET1_RX_CLK,
	ENET1_RX_COL,
	ENET1_RX_CRS,
	ENET1_RX_DATA,
	ENET1_RX_DV,
	ENET1_RX_ER,
	ENET1_TX_CLK,
	ENETCLK_25,
	EX_IO,
	FL_DQ,
	FL_RY,
	GPIO,
	HSMC_CLKIN0,
	HSMC_CLKIN_P1,
	HSMC_CLKIN_P2,
	HSMC_D,
	HSMC_RX_D_P,
	I2C_SDAT,
	IRDA_RXD,
	KEY,
	LCD_DATA,
	OTG_DATA,
	OTG_INT,
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,
	SD_CMD,
	SD_DAT,
	SD_WP_N,
	SMA_CLKIN,
	SRAM_DQ,
	SW,
	TD_CLK27,
	TD_DATA,
	TD_HS,
	TD_VS,
	UART_RTS,
	UART_RXD,
	sampler_tx
);
input  AUD_ADCDAT;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACLRCK;
input  CLOCK2_50;
input  CLOCK3_50;
input  CLOCK_50;
input [31:0] DRAM_DQ;
input  EEP_I2C_SDAT;
input  ENET0_INT_N;
input  ENET0_LINK100;
input  ENET0_MDIO;
input  ENET0_RX_CLK;
input  ENET0_RX_COL;
input  ENET0_RX_CRS;
input [3:0] ENET0_RX_DATA;
input  ENET0_RX_DV;
input  ENET0_RX_ER;
input  ENET0_TX_CLK;
input  ENET1_INT_N;
input  ENET1_LINK100;
input  ENET1_MDIO;
input  ENET1_RX_CLK;
input  ENET1_RX_COL;
input  ENET1_RX_CRS;
input [3:0] ENET1_RX_DATA;
input  ENET1_RX_DV;
input  ENET1_RX_ER;
input  ENET1_TX_CLK;
input  ENETCLK_25;
input [6:0] EX_IO;
input [7:0] FL_DQ;
input  FL_RY;
input [35:0] GPIO;
input  HSMC_CLKIN0;
input  HSMC_CLKIN_P1;
input  HSMC_CLKIN_P2;
input [3:0] HSMC_D;
input [16:0] HSMC_RX_D_P;
input  I2C_SDAT;
input  IRDA_RXD;
input [3:0] KEY;
input [7:0] LCD_DATA;
input [15:0] OTG_DATA;
input  OTG_INT;
input  PS2_CLK;
input  PS2_CLK2;
input  PS2_DAT;
input  PS2_DAT2;
input  SD_CMD;
input [3:0] SD_DAT;
input  SD_WP_N;
input  SMA_CLKIN;
input [15:0] SRAM_DQ;
input [17:0] SW;
input  TD_CLK27;
input [7:0] TD_DATA;
input  TD_HS;
input  TD_VS;
input  UART_RTS;
input  UART_RXD;
output sampler_tx;

reg sample;
time current_time;
always @(AUD_ADCDAT or AUD_ADCLRCK or AUD_BCLK or AUD_DACLRCK or CLOCK2_50 or CLOCK3_50 or CLOCK_50 or DRAM_DQ or EEP_I2C_SDAT or ENET0_INT_N or ENET0_LINK100 or ENET0_MDIO or ENET0_RX_CLK or ENET0_RX_COL or ENET0_RX_CRS or ENET0_RX_DATA or ENET0_RX_DV or ENET0_RX_ER or ENET0_TX_CLK or ENET1_INT_N or ENET1_LINK100 or ENET1_MDIO or ENET1_RX_CLK or ENET1_RX_COL or ENET1_RX_CRS or ENET1_RX_DATA or ENET1_RX_DV or ENET1_RX_ER or ENET1_TX_CLK or ENETCLK_25 or EX_IO or FL_DQ or FL_RY or GPIO or HSMC_CLKIN0 or HSMC_CLKIN_P1 or HSMC_CLKIN_P2 or HSMC_D or HSMC_RX_D_P or I2C_SDAT or IRDA_RXD or KEY or LCD_DATA or OTG_DATA or OTG_INT or PS2_CLK or PS2_CLK2 or PS2_DAT or PS2_DAT2 or SD_CMD or SD_DAT or SD_WP_N or SMA_CLKIN or SRAM_DQ or SW or TD_CLK27 or TD_DATA or TD_HS or TD_VS or UART_RTS or UART_RXD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DE2_115_Default_vlg_check_tst (
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,
	EEP_I2C_SCLK,
	EEP_I2C_SDAT,
	ENET0_GTX_CLK,
	ENET0_MDC,
	ENET0_RST_N,
	ENET0_TX_DATA,
	ENET0_TX_EN,
	ENET0_TX_ER,
	ENET1_GTX_CLK,
	ENET1_MDC,
	ENET1_RST_N,
	ENET1_TX_DATA,
	ENET1_TX_EN,
	ENET1_TX_ER,
	EX_IO,
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RST_N,
	FL_WE_N,
	FL_WP_N,
	GPIO,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	HSMC_CLKOUT0,
	HSMC_CLKOUT_P1,
	HSMC_CLKOUT_P2,
	HSMC_D,
	HSMC_TX_D_P,
	I2C_SCLK,
	I2C_SDAT,
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	LEDG,
	LEDR,
	OTG_ADDR,
	OTG_CS_N,
	OTG_DATA,
	OTG_RD_N,
	OTG_RST_N,
	OTG_WR_N,
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SMA_CLKOUT,
	SRAM_ADDR,
	SRAM_CE_N,
	SRAM_DQ,
	SRAM_LB_N,
	SRAM_OE_N,
	SRAM_UB_N,
	SRAM_WE_N,
	TD_RESET_N,
	UART_CTS,
	UART_TXD,
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,
	sampler_rx
);
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACDAT;
input  AUD_DACLRCK;
input  AUD_XCK;
input [12:0] DRAM_ADDR;
input [1:0] DRAM_BA;
input  DRAM_CAS_N;
input  DRAM_CKE;
input  DRAM_CLK;
input  DRAM_CS_N;
input [31:0] DRAM_DQ;
input [3:0] DRAM_DQM;
input  DRAM_RAS_N;
input  DRAM_WE_N;
input  EEP_I2C_SCLK;
input  EEP_I2C_SDAT;
input  ENET0_GTX_CLK;
input  ENET0_MDC;
input  ENET0_RST_N;
input [3:0] ENET0_TX_DATA;
input  ENET0_TX_EN;
input  ENET0_TX_ER;
input  ENET1_GTX_CLK;
input  ENET1_MDC;
input  ENET1_RST_N;
input [3:0] ENET1_TX_DATA;
input  ENET1_TX_EN;
input  ENET1_TX_ER;
input [6:0] EX_IO;
input [22:0] FL_ADDR;
input  FL_CE_N;
input [7:0] FL_DQ;
input  FL_OE_N;
input  FL_RST_N;
input  FL_WE_N;
input  FL_WP_N;
input [35:0] GPIO;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input  HSMC_CLKOUT0;
input  HSMC_CLKOUT_P1;
input  HSMC_CLKOUT_P2;
input [3:0] HSMC_D;
input [16:0] HSMC_TX_D_P;
input  I2C_SCLK;
input  I2C_SDAT;
input  LCD_BLON;
input [7:0] LCD_DATA;
input  LCD_EN;
input  LCD_ON;
input  LCD_RS;
input  LCD_RW;
input [8:0] LEDG;
input [17:0] LEDR;
input [1:0] OTG_ADDR;
input  OTG_CS_N;
input [15:0] OTG_DATA;
input  OTG_RD_N;
input  OTG_RST_N;
input  OTG_WR_N;
input  PS2_CLK;
input  PS2_CLK2;
input  PS2_DAT;
input  PS2_DAT2;
input  SD_CLK;
input  SD_CMD;
input [3:0] SD_DAT;
input  SMA_CLKOUT;
input [19:0] SRAM_ADDR;
input  SRAM_CE_N;
input [15:0] SRAM_DQ;
input  SRAM_LB_N;
input  SRAM_OE_N;
input  SRAM_UB_N;
input  SRAM_WE_N;
input  TD_RESET_N;
input  UART_CTS;
input  UART_TXD;
input [7:0] VGA_B;
input  VGA_BLANK_N;
input  VGA_CLK;
input [7:0] VGA_G;
input  VGA_HS;
input [7:0] VGA_R;
input  VGA_SYNC_N;
input  VGA_VS;
input sampler_rx;

reg  AUD_ADCLRCK_expected;
reg  AUD_BCLK_expected;
reg  AUD_DACDAT_expected;
reg  AUD_DACLRCK_expected;
reg  AUD_XCK_expected;
reg [12:0] DRAM_ADDR_expected;
reg [1:0] DRAM_BA_expected;
reg  DRAM_CAS_N_expected;
reg  DRAM_CKE_expected;
reg  DRAM_CLK_expected;
reg  DRAM_CS_N_expected;
reg [31:0] DRAM_DQ_expected;
reg [3:0] DRAM_DQM_expected;
reg  DRAM_RAS_N_expected;
reg  DRAM_WE_N_expected;
reg  EEP_I2C_SCLK_expected;
reg  EEP_I2C_SDAT_expected;
reg  ENET0_GTX_CLK_expected;
reg  ENET0_MDC_expected;
reg  ENET0_RST_N_expected;
reg [3:0] ENET0_TX_DATA_expected;
reg  ENET0_TX_EN_expected;
reg  ENET0_TX_ER_expected;
reg  ENET1_GTX_CLK_expected;
reg  ENET1_MDC_expected;
reg  ENET1_RST_N_expected;
reg [3:0] ENET1_TX_DATA_expected;
reg  ENET1_TX_EN_expected;
reg  ENET1_TX_ER_expected;
reg [6:0] EX_IO_expected;
reg [22:0] FL_ADDR_expected;
reg  FL_CE_N_expected;
reg [7:0] FL_DQ_expected;
reg  FL_OE_N_expected;
reg  FL_RST_N_expected;
reg  FL_WE_N_expected;
reg  FL_WP_N_expected;
reg [35:0] GPIO_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg  HSMC_CLKOUT0_expected;
reg  HSMC_CLKOUT_P1_expected;
reg  HSMC_CLKOUT_P2_expected;
reg [3:0] HSMC_D_expected;
reg [16:0] HSMC_TX_D_P_expected;
reg  I2C_SCLK_expected;
reg  I2C_SDAT_expected;
reg  LCD_BLON_expected;
reg [7:0] LCD_DATA_expected;
reg  LCD_EN_expected;
reg  LCD_ON_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg [8:0] LEDG_expected;
reg [17:0] LEDR_expected;
reg [1:0] OTG_ADDR_expected;
reg  OTG_CS_N_expected;
reg [15:0] OTG_DATA_expected;
reg  OTG_RD_N_expected;
reg  OTG_RST_N_expected;
reg  OTG_WR_N_expected;
reg  PS2_CLK_expected;
reg  PS2_CLK2_expected;
reg  PS2_DAT_expected;
reg  PS2_DAT2_expected;
reg  SD_CLK_expected;
reg  SD_CMD_expected;
reg [3:0] SD_DAT_expected;
reg  SMA_CLKOUT_expected;
reg [19:0] SRAM_ADDR_expected;
reg  SRAM_CE_N_expected;
reg [15:0] SRAM_DQ_expected;
reg  SRAM_LB_N_expected;
reg  SRAM_OE_N_expected;
reg  SRAM_UB_N_expected;
reg  SRAM_WE_N_expected;
reg  TD_RESET_N_expected;
reg  UART_CTS_expected;
reg  UART_TXD_expected;
reg [7:0] VGA_B_expected;
reg  VGA_BLANK_N_expected;
reg  VGA_CLK_expected;
reg [7:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [7:0] VGA_R_expected;
reg  VGA_SYNC_N_expected;
reg  VGA_VS_expected;

reg  AUD_ADCLRCK_prev;
reg  AUD_BCLK_prev;
reg  AUD_DACDAT_prev;
reg  AUD_DACLRCK_prev;
reg  AUD_XCK_prev;
reg [12:0] DRAM_ADDR_prev;
reg [1:0] DRAM_BA_prev;
reg  DRAM_CAS_N_prev;
reg  DRAM_CKE_prev;
reg  DRAM_CLK_prev;
reg  DRAM_CS_N_prev;
reg [31:0] DRAM_DQ_prev;
reg [3:0] DRAM_DQM_prev;
reg  DRAM_RAS_N_prev;
reg  DRAM_WE_N_prev;
reg  EEP_I2C_SCLK_prev;
reg  EEP_I2C_SDAT_prev;
reg  ENET0_GTX_CLK_prev;
reg  ENET0_MDC_prev;
reg  ENET0_RST_N_prev;
reg [3:0] ENET0_TX_DATA_prev;
reg  ENET0_TX_EN_prev;
reg  ENET0_TX_ER_prev;
reg  ENET1_GTX_CLK_prev;
reg  ENET1_MDC_prev;
reg  ENET1_RST_N_prev;
reg [3:0] ENET1_TX_DATA_prev;
reg  ENET1_TX_EN_prev;
reg  ENET1_TX_ER_prev;
reg [6:0] EX_IO_prev;
reg [22:0] FL_ADDR_prev;
reg  FL_CE_N_prev;
reg [7:0] FL_DQ_prev;
reg  FL_OE_N_prev;
reg  FL_RST_N_prev;
reg  FL_WE_N_prev;
reg  FL_WP_N_prev;
reg [35:0] GPIO_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg  HSMC_CLKOUT0_prev;
reg  HSMC_CLKOUT_P1_prev;
reg  HSMC_CLKOUT_P2_prev;
reg [3:0] HSMC_D_prev;
reg [16:0] HSMC_TX_D_P_prev;
reg  I2C_SCLK_prev;
reg  I2C_SDAT_prev;
reg  LCD_BLON_prev;
reg [7:0] LCD_DATA_prev;
reg  LCD_EN_prev;
reg  LCD_ON_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg [8:0] LEDG_prev;
reg [17:0] LEDR_prev;
reg [1:0] OTG_ADDR_prev;
reg  OTG_CS_N_prev;
reg [15:0] OTG_DATA_prev;
reg  OTG_RD_N_prev;
reg  OTG_RST_N_prev;
reg  OTG_WR_N_prev;
reg  PS2_CLK_prev;
reg  PS2_CLK2_prev;
reg  PS2_DAT_prev;
reg  PS2_DAT2_prev;
reg  SD_CLK_prev;
reg  SD_CMD_prev;
reg [3:0] SD_DAT_prev;
reg  SMA_CLKOUT_prev;
reg [19:0] SRAM_ADDR_prev;
reg  SRAM_CE_N_prev;
reg [15:0] SRAM_DQ_prev;
reg  SRAM_LB_N_prev;
reg  SRAM_OE_N_prev;
reg  SRAM_UB_N_prev;
reg  SRAM_WE_N_prev;
reg  TD_RESET_N_prev;
reg  UART_CTS_prev;
reg  UART_TXD_prev;
reg [7:0] VGA_B_prev;
reg  VGA_BLANK_N_prev;
reg  VGA_CLK_prev;
reg [7:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [7:0] VGA_R_prev;
reg  VGA_SYNC_N_prev;
reg  VGA_VS_prev;

reg [7:0] VGA_B_expected_prev;
reg  VGA_BLANK_N_expected_prev;
reg  VGA_CLK_expected_prev;
reg [7:0] VGA_G_expected_prev;
reg  VGA_HS_expected_prev;
reg [7:0] VGA_R_expected_prev;
reg  VGA_SYNC_N_expected_prev;
reg  VGA_VS_expected_prev;

reg [7:0] last_VGA_B_exp;
reg  last_VGA_BLANK_N_exp;
reg  last_VGA_CLK_exp;
reg [7:0] last_VGA_G_exp;
reg  last_VGA_HS_exp;
reg [7:0] last_VGA_R_exp;
reg  last_VGA_SYNC_N_exp;
reg  last_VGA_VS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:93] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 93'b1;
end

// update real /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_prev = AUD_ADCLRCK;
	AUD_BCLK_prev = AUD_BCLK;
	AUD_DACDAT_prev = AUD_DACDAT;
	AUD_DACLRCK_prev = AUD_DACLRCK;
	AUD_XCK_prev = AUD_XCK;
	DRAM_ADDR_prev = DRAM_ADDR;
	DRAM_BA_prev = DRAM_BA;
	DRAM_CAS_N_prev = DRAM_CAS_N;
	DRAM_CKE_prev = DRAM_CKE;
	DRAM_CLK_prev = DRAM_CLK;
	DRAM_CS_N_prev = DRAM_CS_N;
	DRAM_DQ_prev = DRAM_DQ;
	DRAM_DQM_prev = DRAM_DQM;
	DRAM_RAS_N_prev = DRAM_RAS_N;
	DRAM_WE_N_prev = DRAM_WE_N;
	EEP_I2C_SCLK_prev = EEP_I2C_SCLK;
	EEP_I2C_SDAT_prev = EEP_I2C_SDAT;
	ENET0_GTX_CLK_prev = ENET0_GTX_CLK;
	ENET0_MDC_prev = ENET0_MDC;
	ENET0_RST_N_prev = ENET0_RST_N;
	ENET0_TX_DATA_prev = ENET0_TX_DATA;
	ENET0_TX_EN_prev = ENET0_TX_EN;
	ENET0_TX_ER_prev = ENET0_TX_ER;
	ENET1_GTX_CLK_prev = ENET1_GTX_CLK;
	ENET1_MDC_prev = ENET1_MDC;
	ENET1_RST_N_prev = ENET1_RST_N;
	ENET1_TX_DATA_prev = ENET1_TX_DATA;
	ENET1_TX_EN_prev = ENET1_TX_EN;
	ENET1_TX_ER_prev = ENET1_TX_ER;
	EX_IO_prev = EX_IO;
	FL_ADDR_prev = FL_ADDR;
	FL_CE_N_prev = FL_CE_N;
	FL_DQ_prev = FL_DQ;
	FL_OE_N_prev = FL_OE_N;
	FL_RST_N_prev = FL_RST_N;
	FL_WE_N_prev = FL_WE_N;
	FL_WP_N_prev = FL_WP_N;
	GPIO_prev = GPIO;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	HSMC_CLKOUT0_prev = HSMC_CLKOUT0;
	HSMC_CLKOUT_P1_prev = HSMC_CLKOUT_P1;
	HSMC_CLKOUT_P2_prev = HSMC_CLKOUT_P2;
	HSMC_D_prev = HSMC_D;
	HSMC_TX_D_P_prev = HSMC_TX_D_P;
	I2C_SCLK_prev = I2C_SCLK;
	I2C_SDAT_prev = I2C_SDAT;
	LCD_BLON_prev = LCD_BLON;
	LCD_DATA_prev = LCD_DATA;
	LCD_EN_prev = LCD_EN;
	LCD_ON_prev = LCD_ON;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
	OTG_ADDR_prev = OTG_ADDR;
	OTG_CS_N_prev = OTG_CS_N;
	OTG_DATA_prev = OTG_DATA;
	OTG_RD_N_prev = OTG_RD_N;
	OTG_RST_N_prev = OTG_RST_N;
	OTG_WR_N_prev = OTG_WR_N;
	PS2_CLK_prev = PS2_CLK;
	PS2_CLK2_prev = PS2_CLK2;
	PS2_DAT_prev = PS2_DAT;
	PS2_DAT2_prev = PS2_DAT2;
	SD_CLK_prev = SD_CLK;
	SD_CMD_prev = SD_CMD;
	SD_DAT_prev = SD_DAT;
	SMA_CLKOUT_prev = SMA_CLKOUT;
	SRAM_ADDR_prev = SRAM_ADDR;
	SRAM_CE_N_prev = SRAM_CE_N;
	SRAM_DQ_prev = SRAM_DQ;
	SRAM_LB_N_prev = SRAM_LB_N;
	SRAM_OE_N_prev = SRAM_OE_N;
	SRAM_UB_N_prev = SRAM_UB_N;
	SRAM_WE_N_prev = SRAM_WE_N;
	TD_RESET_N_prev = TD_RESET_N;
	UART_CTS_prev = UART_CTS;
	UART_TXD_prev = UART_TXD;
	VGA_B_prev = VGA_B;
	VGA_BLANK_N_prev = VGA_BLANK_N;
	VGA_CLK_prev = VGA_CLK;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_SYNC_N_prev = VGA_SYNC_N;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	VGA_B_expected_prev = VGA_B_expected;
	VGA_BLANK_N_expected_prev = VGA_BLANK_N_expected;
	VGA_CLK_expected_prev = VGA_CLK_expected;
	VGA_G_expected_prev = VGA_G_expected;
	VGA_HS_expected_prev = VGA_HS_expected;
	VGA_R_expected_prev = VGA_R_expected;
	VGA_SYNC_N_expected_prev = VGA_SYNC_N_expected;
	VGA_VS_expected_prev = VGA_VS_expected;
end


// expected VGA_B[ 7 ]
initial
begin
	VGA_B_expected[7] = 1'bX;
end 
// expected VGA_B[ 6 ]
initial
begin
	VGA_B_expected[6] = 1'bX;
end 
// expected VGA_B[ 5 ]
initial
begin
	VGA_B_expected[5] = 1'bX;
end 
// expected VGA_B[ 4 ]
initial
begin
	VGA_B_expected[4] = 1'bX;
end 
// expected VGA_B[ 3 ]
initial
begin
	VGA_B_expected[3] = 1'bX;
end 
// expected VGA_B[ 2 ]
initial
begin
	VGA_B_expected[2] = 1'bX;
end 
// expected VGA_B[ 1 ]
initial
begin
	VGA_B_expected[1] = 1'bX;
end 
// expected VGA_B[ 0 ]
initial
begin
	VGA_B_expected[0] = 1'bX;
end 

// expected VGA_BLANK_N
initial
begin
	VGA_BLANK_N_expected = 1'bX;
end 

// expected VGA_CLK
initial
begin
	VGA_CLK_expected = 1'bX;
end 
// expected VGA_G[ 7 ]
initial
begin
	VGA_G_expected[7] = 1'bX;
end 
// expected VGA_G[ 6 ]
initial
begin
	VGA_G_expected[6] = 1'bX;
end 
// expected VGA_G[ 5 ]
initial
begin
	VGA_G_expected[5] = 1'bX;
end 
// expected VGA_G[ 4 ]
initial
begin
	VGA_G_expected[4] = 1'bX;
end 
// expected VGA_G[ 3 ]
initial
begin
	VGA_G_expected[3] = 1'bX;
end 
// expected VGA_G[ 2 ]
initial
begin
	VGA_G_expected[2] = 1'bX;
end 
// expected VGA_G[ 1 ]
initial
begin
	VGA_G_expected[1] = 1'bX;
end 
// expected VGA_G[ 0 ]
initial
begin
	VGA_G_expected[0] = 1'bX;
end 

// expected VGA_HS
initial
begin
	VGA_HS_expected = 1'bX;
end 
// expected VGA_R[ 7 ]
initial
begin
	VGA_R_expected[7] = 1'bX;
end 
// expected VGA_R[ 6 ]
initial
begin
	VGA_R_expected[6] = 1'bX;
end 
// expected VGA_R[ 5 ]
initial
begin
	VGA_R_expected[5] = 1'bX;
end 
// expected VGA_R[ 4 ]
initial
begin
	VGA_R_expected[4] = 1'bX;
end 
// expected VGA_R[ 3 ]
initial
begin
	VGA_R_expected[3] = 1'bX;
end 
// expected VGA_R[ 2 ]
initial
begin
	VGA_R_expected[2] = 1'bX;
end 
// expected VGA_R[ 1 ]
initial
begin
	VGA_R_expected[1] = 1'bX;
end 
// expected VGA_R[ 0 ]
initial
begin
	VGA_R_expected[0] = 1'bX;
end 

// expected VGA_SYNC_N
initial
begin
	VGA_SYNC_N_expected = 1'bX;
end 

// expected VGA_VS
initial
begin
	VGA_VS_expected = 1'bX;
end 
// generate trigger
always @(AUD_ADCLRCK_expected or AUD_ADCLRCK or AUD_BCLK_expected or AUD_BCLK or AUD_DACDAT_expected or AUD_DACDAT or AUD_DACLRCK_expected or AUD_DACLRCK or AUD_XCK_expected or AUD_XCK or DRAM_ADDR_expected or DRAM_ADDR or DRAM_BA_expected or DRAM_BA or DRAM_CAS_N_expected or DRAM_CAS_N or DRAM_CKE_expected or DRAM_CKE or DRAM_CLK_expected or DRAM_CLK or DRAM_CS_N_expected or DRAM_CS_N or DRAM_DQ_expected or DRAM_DQ or DRAM_DQM_expected or DRAM_DQM or DRAM_RAS_N_expected or DRAM_RAS_N or DRAM_WE_N_expected or DRAM_WE_N or EEP_I2C_SCLK_expected or EEP_I2C_SCLK or EEP_I2C_SDAT_expected or EEP_I2C_SDAT or ENET0_GTX_CLK_expected or ENET0_GTX_CLK or ENET0_MDC_expected or ENET0_MDC or ENET0_RST_N_expected or ENET0_RST_N or ENET0_TX_DATA_expected or ENET0_TX_DATA or ENET0_TX_EN_expected or ENET0_TX_EN or ENET0_TX_ER_expected or ENET0_TX_ER or ENET1_GTX_CLK_expected or ENET1_GTX_CLK or ENET1_MDC_expected or ENET1_MDC or ENET1_RST_N_expected or ENET1_RST_N or ENET1_TX_DATA_expected or ENET1_TX_DATA or ENET1_TX_EN_expected or ENET1_TX_EN or ENET1_TX_ER_expected or ENET1_TX_ER or EX_IO_expected or EX_IO or FL_ADDR_expected or FL_ADDR or FL_CE_N_expected or FL_CE_N or FL_DQ_expected or FL_DQ or FL_OE_N_expected or FL_OE_N or FL_RST_N_expected or FL_RST_N or FL_WE_N_expected or FL_WE_N or FL_WP_N_expected or FL_WP_N or GPIO_expected or GPIO or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or HSMC_CLKOUT0_expected or HSMC_CLKOUT0 or HSMC_CLKOUT_P1_expected or HSMC_CLKOUT_P1 or HSMC_CLKOUT_P2_expected or HSMC_CLKOUT_P2 or HSMC_D_expected or HSMC_D or HSMC_TX_D_P_expected or HSMC_TX_D_P or I2C_SCLK_expected or I2C_SCLK or I2C_SDAT_expected or I2C_SDAT or LCD_BLON_expected or LCD_BLON or LCD_DATA_expected or LCD_DATA or LCD_EN_expected or LCD_EN or LCD_ON_expected or LCD_ON or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or LEDG_expected or LEDG or LEDR_expected or LEDR or OTG_ADDR_expected or OTG_ADDR or OTG_CS_N_expected or OTG_CS_N or OTG_DATA_expected or OTG_DATA or OTG_RD_N_expected or OTG_RD_N or OTG_RST_N_expected or OTG_RST_N or OTG_WR_N_expected or OTG_WR_N or PS2_CLK_expected or PS2_CLK or PS2_CLK2_expected or PS2_CLK2 or PS2_DAT_expected or PS2_DAT or PS2_DAT2_expected or PS2_DAT2 or SD_CLK_expected or SD_CLK or SD_CMD_expected or SD_CMD or SD_DAT_expected or SD_DAT or SMA_CLKOUT_expected or SMA_CLKOUT or SRAM_ADDR_expected or SRAM_ADDR or SRAM_CE_N_expected or SRAM_CE_N or SRAM_DQ_expected or SRAM_DQ or SRAM_LB_N_expected or SRAM_LB_N or SRAM_OE_N_expected or SRAM_OE_N or SRAM_UB_N_expected or SRAM_UB_N or SRAM_WE_N_expected or SRAM_WE_N or TD_RESET_N_expected or TD_RESET_N or UART_CTS_expected or UART_CTS or UART_TXD_expected or UART_TXD or VGA_B_expected or VGA_B or VGA_BLANK_N_expected or VGA_BLANK_N or VGA_CLK_expected or VGA_CLK or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_SYNC_N_expected or VGA_SYNC_N or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AUD_ADCLRCK = %b | expected AUD_BCLK = %b | expected AUD_DACDAT = %b | expected AUD_DACLRCK = %b | expected AUD_XCK = %b | expected DRAM_ADDR = %b | expected DRAM_BA = %b | expected DRAM_CAS_N = %b | expected DRAM_CKE = %b | expected DRAM_CLK = %b | expected DRAM_CS_N = %b | expected DRAM_DQ = %b | expected DRAM_DQM = %b | expected DRAM_RAS_N = %b | expected DRAM_WE_N = %b | expected EEP_I2C_SCLK = %b | expected EEP_I2C_SDAT = %b | expected ENET0_GTX_CLK = %b | expected ENET0_MDC = %b | expected ENET0_RST_N = %b | expected ENET0_TX_DATA = %b | expected ENET0_TX_EN = %b | expected ENET0_TX_ER = %b | expected ENET1_GTX_CLK = %b | expected ENET1_MDC = %b | expected ENET1_RST_N = %b | expected ENET1_TX_DATA = %b | expected ENET1_TX_EN = %b | expected ENET1_TX_ER = %b | expected EX_IO = %b | expected FL_ADDR = %b | expected FL_CE_N = %b | expected FL_DQ = %b | expected FL_OE_N = %b | expected FL_RST_N = %b | expected FL_WE_N = %b | expected FL_WP_N = %b | expected GPIO = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected HSMC_CLKOUT0 = %b | expected HSMC_CLKOUT_P1 = %b | expected HSMC_CLKOUT_P2 = %b | expected HSMC_D = %b | expected HSMC_TX_D_P = %b | expected I2C_SCLK = %b | expected I2C_SDAT = %b | expected LCD_BLON = %b | expected LCD_DATA = %b | expected LCD_EN = %b | expected LCD_ON = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected LEDG = %b | expected LEDR = %b | expected OTG_ADDR = %b | expected OTG_CS_N = %b | expected OTG_DATA = %b | expected OTG_RD_N = %b | expected OTG_RST_N = %b | expected OTG_WR_N = %b | expected PS2_CLK = %b | expected PS2_CLK2 = %b | expected PS2_DAT = %b | expected PS2_DAT2 = %b | expected SD_CLK = %b | expected SD_CMD = %b | expected SD_DAT = %b | expected SMA_CLKOUT = %b | expected SRAM_ADDR = %b | expected SRAM_CE_N = %b | expected SRAM_DQ = %b | expected SRAM_LB_N = %b | expected SRAM_OE_N = %b | expected SRAM_UB_N = %b | expected SRAM_WE_N = %b | expected TD_RESET_N = %b | expected UART_CTS = %b | expected UART_TXD = %b | expected VGA_B = %b | expected VGA_BLANK_N = %b | expected VGA_CLK = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_SYNC_N = %b | expected VGA_VS = %b | ",AUD_ADCLRCK_expected_prev,AUD_BCLK_expected_prev,AUD_DACDAT_expected_prev,AUD_DACLRCK_expected_prev,AUD_XCK_expected_prev,DRAM_ADDR_expected_prev,DRAM_BA_expected_prev,DRAM_CAS_N_expected_prev,DRAM_CKE_expected_prev,DRAM_CLK_expected_prev,DRAM_CS_N_expected_prev,DRAM_DQ_expected_prev,DRAM_DQM_expected_prev,DRAM_RAS_N_expected_prev,DRAM_WE_N_expected_prev,EEP_I2C_SCLK_expected_prev,EEP_I2C_SDAT_expected_prev,ENET0_GTX_CLK_expected_prev,ENET0_MDC_expected_prev,ENET0_RST_N_expected_prev,ENET0_TX_DATA_expected_prev,ENET0_TX_EN_expected_prev,ENET0_TX_ER_expected_prev,ENET1_GTX_CLK_expected_prev,ENET1_MDC_expected_prev,ENET1_RST_N_expected_prev,ENET1_TX_DATA_expected_prev,ENET1_TX_EN_expected_prev,ENET1_TX_ER_expected_prev,EX_IO_expected_prev,FL_ADDR_expected_prev,FL_CE_N_expected_prev,FL_DQ_expected_prev,FL_OE_N_expected_prev,FL_RST_N_expected_prev,FL_WE_N_expected_prev,FL_WP_N_expected_prev,GPIO_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,HSMC_CLKOUT0_expected_prev,HSMC_CLKOUT_P1_expected_prev,HSMC_CLKOUT_P2_expected_prev,HSMC_D_expected_prev,HSMC_TX_D_P_expected_prev,I2C_SCLK_expected_prev,I2C_SDAT_expected_prev,LCD_BLON_expected_prev,LCD_DATA_expected_prev,LCD_EN_expected_prev,LCD_ON_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,LEDG_expected_prev,LEDR_expected_prev,OTG_ADDR_expected_prev,OTG_CS_N_expected_prev,OTG_DATA_expected_prev,OTG_RD_N_expected_prev,OTG_RST_N_expected_prev,OTG_WR_N_expected_prev,PS2_CLK_expected_prev,PS2_CLK2_expected_prev,PS2_DAT_expected_prev,PS2_DAT2_expected_prev,SD_CLK_expected_prev,SD_CMD_expected_prev,SD_DAT_expected_prev,SMA_CLKOUT_expected_prev,SRAM_ADDR_expected_prev,SRAM_CE_N_expected_prev,SRAM_DQ_expected_prev,SRAM_LB_N_expected_prev,SRAM_OE_N_expected_prev,SRAM_UB_N_expected_prev,SRAM_WE_N_expected_prev,TD_RESET_N_expected_prev,UART_CTS_expected_prev,UART_TXD_expected_prev,VGA_B_expected_prev,VGA_BLANK_N_expected_prev,VGA_CLK_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_SYNC_N_expected_prev,VGA_VS_expected_prev);
	$display("| real AUD_ADCLRCK = %b | real AUD_BCLK = %b | real AUD_DACDAT = %b | real AUD_DACLRCK = %b | real AUD_XCK = %b | real DRAM_ADDR = %b | real DRAM_BA = %b | real DRAM_CAS_N = %b | real DRAM_CKE = %b | real DRAM_CLK = %b | real DRAM_CS_N = %b | real DRAM_DQ = %b | real DRAM_DQM = %b | real DRAM_RAS_N = %b | real DRAM_WE_N = %b | real EEP_I2C_SCLK = %b | real EEP_I2C_SDAT = %b | real ENET0_GTX_CLK = %b | real ENET0_MDC = %b | real ENET0_RST_N = %b | real ENET0_TX_DATA = %b | real ENET0_TX_EN = %b | real ENET0_TX_ER = %b | real ENET1_GTX_CLK = %b | real ENET1_MDC = %b | real ENET1_RST_N = %b | real ENET1_TX_DATA = %b | real ENET1_TX_EN = %b | real ENET1_TX_ER = %b | real EX_IO = %b | real FL_ADDR = %b | real FL_CE_N = %b | real FL_DQ = %b | real FL_OE_N = %b | real FL_RST_N = %b | real FL_WE_N = %b | real FL_WP_N = %b | real GPIO = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real HSMC_CLKOUT0 = %b | real HSMC_CLKOUT_P1 = %b | real HSMC_CLKOUT_P2 = %b | real HSMC_D = %b | real HSMC_TX_D_P = %b | real I2C_SCLK = %b | real I2C_SDAT = %b | real LCD_BLON = %b | real LCD_DATA = %b | real LCD_EN = %b | real LCD_ON = %b | real LCD_RS = %b | real LCD_RW = %b | real LEDG = %b | real LEDR = %b | real OTG_ADDR = %b | real OTG_CS_N = %b | real OTG_DATA = %b | real OTG_RD_N = %b | real OTG_RST_N = %b | real OTG_WR_N = %b | real PS2_CLK = %b | real PS2_CLK2 = %b | real PS2_DAT = %b | real PS2_DAT2 = %b | real SD_CLK = %b | real SD_CMD = %b | real SD_DAT = %b | real SMA_CLKOUT = %b | real SRAM_ADDR = %b | real SRAM_CE_N = %b | real SRAM_DQ = %b | real SRAM_LB_N = %b | real SRAM_OE_N = %b | real SRAM_UB_N = %b | real SRAM_WE_N = %b | real TD_RESET_N = %b | real UART_CTS = %b | real UART_TXD = %b | real VGA_B = %b | real VGA_BLANK_N = %b | real VGA_CLK = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_SYNC_N = %b | real VGA_VS = %b | ",AUD_ADCLRCK_prev,AUD_BCLK_prev,AUD_DACDAT_prev,AUD_DACLRCK_prev,AUD_XCK_prev,DRAM_ADDR_prev,DRAM_BA_prev,DRAM_CAS_N_prev,DRAM_CKE_prev,DRAM_CLK_prev,DRAM_CS_N_prev,DRAM_DQ_prev,DRAM_DQM_prev,DRAM_RAS_N_prev,DRAM_WE_N_prev,EEP_I2C_SCLK_prev,EEP_I2C_SDAT_prev,ENET0_GTX_CLK_prev,ENET0_MDC_prev,ENET0_RST_N_prev,ENET0_TX_DATA_prev,ENET0_TX_EN_prev,ENET0_TX_ER_prev,ENET1_GTX_CLK_prev,ENET1_MDC_prev,ENET1_RST_N_prev,ENET1_TX_DATA_prev,ENET1_TX_EN_prev,ENET1_TX_ER_prev,EX_IO_prev,FL_ADDR_prev,FL_CE_N_prev,FL_DQ_prev,FL_OE_N_prev,FL_RST_N_prev,FL_WE_N_prev,FL_WP_N_prev,GPIO_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,HSMC_CLKOUT0_prev,HSMC_CLKOUT_P1_prev,HSMC_CLKOUT_P2_prev,HSMC_D_prev,HSMC_TX_D_P_prev,I2C_SCLK_prev,I2C_SDAT_prev,LCD_BLON_prev,LCD_DATA_prev,LCD_EN_prev,LCD_ON_prev,LCD_RS_prev,LCD_RW_prev,LEDG_prev,LEDR_prev,OTG_ADDR_prev,OTG_CS_N_prev,OTG_DATA_prev,OTG_RD_N_prev,OTG_RST_N_prev,OTG_WR_N_prev,PS2_CLK_prev,PS2_CLK2_prev,PS2_DAT_prev,PS2_DAT2_prev,SD_CLK_prev,SD_CMD_prev,SD_DAT_prev,SMA_CLKOUT_prev,SRAM_ADDR_prev,SRAM_CE_N_prev,SRAM_DQ_prev,SRAM_LB_N_prev,SRAM_OE_N_prev,SRAM_UB_N_prev,SRAM_WE_N_prev,TD_RESET_N_prev,UART_CTS_prev,UART_TXD_prev,VGA_B_prev,VGA_BLANK_N_prev,VGA_CLK_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_SYNC_N_prev,VGA_VS_prev);
`endif
	if (
		( VGA_B_expected_prev[0] !== 1'bx ) && ( VGA_B_prev[0] !== VGA_B_expected_prev[0] )
		&& ((VGA_B_expected_prev[0] !== last_VGA_B_exp[0]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[0] = VGA_B_expected_prev[0];
	end
	if (
		( VGA_B_expected_prev[1] !== 1'bx ) && ( VGA_B_prev[1] !== VGA_B_expected_prev[1] )
		&& ((VGA_B_expected_prev[1] !== last_VGA_B_exp[1]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[1] = VGA_B_expected_prev[1];
	end
	if (
		( VGA_B_expected_prev[2] !== 1'bx ) && ( VGA_B_prev[2] !== VGA_B_expected_prev[2] )
		&& ((VGA_B_expected_prev[2] !== last_VGA_B_exp[2]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[2] = VGA_B_expected_prev[2];
	end
	if (
		( VGA_B_expected_prev[3] !== 1'bx ) && ( VGA_B_prev[3] !== VGA_B_expected_prev[3] )
		&& ((VGA_B_expected_prev[3] !== last_VGA_B_exp[3]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[3] = VGA_B_expected_prev[3];
	end
	if (
		( VGA_B_expected_prev[4] !== 1'bx ) && ( VGA_B_prev[4] !== VGA_B_expected_prev[4] )
		&& ((VGA_B_expected_prev[4] !== last_VGA_B_exp[4]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[4] = VGA_B_expected_prev[4];
	end
	if (
		( VGA_B_expected_prev[5] !== 1'bx ) && ( VGA_B_prev[5] !== VGA_B_expected_prev[5] )
		&& ((VGA_B_expected_prev[5] !== last_VGA_B_exp[5]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[5] = VGA_B_expected_prev[5];
	end
	if (
		( VGA_B_expected_prev[6] !== 1'bx ) && ( VGA_B_prev[6] !== VGA_B_expected_prev[6] )
		&& ((VGA_B_expected_prev[6] !== last_VGA_B_exp[6]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[6] = VGA_B_expected_prev[6];
	end
	if (
		( VGA_B_expected_prev[7] !== 1'bx ) && ( VGA_B_prev[7] !== VGA_B_expected_prev[7] )
		&& ((VGA_B_expected_prev[7] !== last_VGA_B_exp[7]) ||
			on_first_change[86])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[86] = 1'b0;
		last_VGA_B_exp[7] = VGA_B_expected_prev[7];
	end
	if (
		( VGA_BLANK_N_expected_prev !== 1'bx ) && ( VGA_BLANK_N_prev !== VGA_BLANK_N_expected_prev )
		&& ((VGA_BLANK_N_expected_prev !== last_VGA_BLANK_N_exp) ||
			on_first_change[87])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_BLANK_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_BLANK_N_expected_prev);
		$display ("     Real value = %b", VGA_BLANK_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[87] = 1'b0;
		last_VGA_BLANK_N_exp = VGA_BLANK_N_expected_prev;
	end
	if (
		( VGA_CLK_expected_prev !== 1'bx ) && ( VGA_CLK_prev !== VGA_CLK_expected_prev )
		&& ((VGA_CLK_expected_prev !== last_VGA_CLK_exp) ||
			on_first_change[88])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_CLK_expected_prev);
		$display ("     Real value = %b", VGA_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[88] = 1'b0;
		last_VGA_CLK_exp = VGA_CLK_expected_prev;
	end
	if (
		( VGA_G_expected_prev[0] !== 1'bx ) && ( VGA_G_prev[0] !== VGA_G_expected_prev[0] )
		&& ((VGA_G_expected_prev[0] !== last_VGA_G_exp[0]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[0] = VGA_G_expected_prev[0];
	end
	if (
		( VGA_G_expected_prev[1] !== 1'bx ) && ( VGA_G_prev[1] !== VGA_G_expected_prev[1] )
		&& ((VGA_G_expected_prev[1] !== last_VGA_G_exp[1]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[1] = VGA_G_expected_prev[1];
	end
	if (
		( VGA_G_expected_prev[2] !== 1'bx ) && ( VGA_G_prev[2] !== VGA_G_expected_prev[2] )
		&& ((VGA_G_expected_prev[2] !== last_VGA_G_exp[2]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[2] = VGA_G_expected_prev[2];
	end
	if (
		( VGA_G_expected_prev[3] !== 1'bx ) && ( VGA_G_prev[3] !== VGA_G_expected_prev[3] )
		&& ((VGA_G_expected_prev[3] !== last_VGA_G_exp[3]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[3] = VGA_G_expected_prev[3];
	end
	if (
		( VGA_G_expected_prev[4] !== 1'bx ) && ( VGA_G_prev[4] !== VGA_G_expected_prev[4] )
		&& ((VGA_G_expected_prev[4] !== last_VGA_G_exp[4]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[4] = VGA_G_expected_prev[4];
	end
	if (
		( VGA_G_expected_prev[5] !== 1'bx ) && ( VGA_G_prev[5] !== VGA_G_expected_prev[5] )
		&& ((VGA_G_expected_prev[5] !== last_VGA_G_exp[5]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[5] = VGA_G_expected_prev[5];
	end
	if (
		( VGA_G_expected_prev[6] !== 1'bx ) && ( VGA_G_prev[6] !== VGA_G_expected_prev[6] )
		&& ((VGA_G_expected_prev[6] !== last_VGA_G_exp[6]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[6] = VGA_G_expected_prev[6];
	end
	if (
		( VGA_G_expected_prev[7] !== 1'bx ) && ( VGA_G_prev[7] !== VGA_G_expected_prev[7] )
		&& ((VGA_G_expected_prev[7] !== last_VGA_G_exp[7]) ||
			on_first_change[89])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[89] = 1'b0;
		last_VGA_G_exp[7] = VGA_G_expected_prev[7];
	end
	if (
		( VGA_HS_expected_prev !== 1'bx ) && ( VGA_HS_prev !== VGA_HS_expected_prev )
		&& ((VGA_HS_expected_prev !== last_VGA_HS_exp) ||
			on_first_change[90])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_HS_expected_prev);
		$display ("     Real value = %b", VGA_HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[90] = 1'b0;
		last_VGA_HS_exp = VGA_HS_expected_prev;
	end
	if (
		( VGA_R_expected_prev[0] !== 1'bx ) && ( VGA_R_prev[0] !== VGA_R_expected_prev[0] )
		&& ((VGA_R_expected_prev[0] !== last_VGA_R_exp[0]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[0] = VGA_R_expected_prev[0];
	end
	if (
		( VGA_R_expected_prev[1] !== 1'bx ) && ( VGA_R_prev[1] !== VGA_R_expected_prev[1] )
		&& ((VGA_R_expected_prev[1] !== last_VGA_R_exp[1]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[1] = VGA_R_expected_prev[1];
	end
	if (
		( VGA_R_expected_prev[2] !== 1'bx ) && ( VGA_R_prev[2] !== VGA_R_expected_prev[2] )
		&& ((VGA_R_expected_prev[2] !== last_VGA_R_exp[2]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[2] = VGA_R_expected_prev[2];
	end
	if (
		( VGA_R_expected_prev[3] !== 1'bx ) && ( VGA_R_prev[3] !== VGA_R_expected_prev[3] )
		&& ((VGA_R_expected_prev[3] !== last_VGA_R_exp[3]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[3] = VGA_R_expected_prev[3];
	end
	if (
		( VGA_R_expected_prev[4] !== 1'bx ) && ( VGA_R_prev[4] !== VGA_R_expected_prev[4] )
		&& ((VGA_R_expected_prev[4] !== last_VGA_R_exp[4]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[4] = VGA_R_expected_prev[4];
	end
	if (
		( VGA_R_expected_prev[5] !== 1'bx ) && ( VGA_R_prev[5] !== VGA_R_expected_prev[5] )
		&& ((VGA_R_expected_prev[5] !== last_VGA_R_exp[5]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[5] = VGA_R_expected_prev[5];
	end
	if (
		( VGA_R_expected_prev[6] !== 1'bx ) && ( VGA_R_prev[6] !== VGA_R_expected_prev[6] )
		&& ((VGA_R_expected_prev[6] !== last_VGA_R_exp[6]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[6] = VGA_R_expected_prev[6];
	end
	if (
		( VGA_R_expected_prev[7] !== 1'bx ) && ( VGA_R_prev[7] !== VGA_R_expected_prev[7] )
		&& ((VGA_R_expected_prev[7] !== last_VGA_R_exp[7]) ||
			on_first_change[91])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[91] = 1'b0;
		last_VGA_R_exp[7] = VGA_R_expected_prev[7];
	end
	if (
		( VGA_SYNC_N_expected_prev !== 1'bx ) && ( VGA_SYNC_N_prev !== VGA_SYNC_N_expected_prev )
		&& ((VGA_SYNC_N_expected_prev !== last_VGA_SYNC_N_exp) ||
			on_first_change[92])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_SYNC_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_SYNC_N_expected_prev);
		$display ("     Real value = %b", VGA_SYNC_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[92] = 1'b0;
		last_VGA_SYNC_N_exp = VGA_SYNC_N_expected_prev;
	end
	if (
		( VGA_VS_expected_prev !== 1'bx ) && ( VGA_VS_prev !== VGA_VS_expected_prev )
		&& ((VGA_VS_expected_prev !== last_VGA_VS_exp) ||
			on_first_change[93])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_VS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_VS_expected_prev);
		$display ("     Real value = %b", VGA_VS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[93] = 1'b0;
		last_VGA_VS_exp = VGA_VS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module DE2_115_Default_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK2_50;
reg CLOCK3_50;
reg CLOCK_50;
reg [31:0] treg_DRAM_DQ;
reg treg_EEP_I2C_SDAT;
reg ENET0_INT_N;
reg ENET0_LINK100;
reg ENET0_MDIO;
reg ENET0_RX_CLK;
reg ENET0_RX_COL;
reg ENET0_RX_CRS;
reg [3:0] ENET0_RX_DATA;
reg ENET0_RX_DV;
reg ENET0_RX_ER;
reg ENET0_TX_CLK;
reg ENET1_INT_N;
reg ENET1_LINK100;
reg ENET1_MDIO;
reg ENET1_RX_CLK;
reg ENET1_RX_COL;
reg ENET1_RX_CRS;
reg [3:0] ENET1_RX_DATA;
reg ENET1_RX_DV;
reg ENET1_RX_ER;
reg ENET1_TX_CLK;
reg ENETCLK_25;
reg [6:0] treg_EX_IO;
reg [7:0] treg_FL_DQ;
reg FL_RY;
reg [35:0] treg_GPIO;
reg HSMC_CLKIN0;
reg HSMC_CLKIN_P1;
reg HSMC_CLKIN_P2;
reg [3:0] treg_HSMC_D;
reg [16:0] HSMC_RX_D_P;
reg treg_I2C_SDAT;
reg IRDA_RXD;
reg [3:0] KEY;
reg [7:0] treg_LCD_DATA;
reg [15:0] treg_OTG_DATA;
reg OTG_INT;
reg treg_PS2_CLK;
reg treg_PS2_CLK2;
reg treg_PS2_DAT;
reg treg_PS2_DAT2;
reg treg_SD_CMD;
reg [3:0] treg_SD_DAT;
reg SD_WP_N;
reg SMA_CLKIN;
reg [15:0] treg_SRAM_DQ;
reg [17:0] SW;
reg TD_CLK27;
reg [7:0] TD_DATA;
reg TD_HS;
reg TD_VS;
reg UART_RTS;
reg UART_RXD;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [31:0] DRAM_DQ;
wire [3:0] DRAM_DQM;
wire DRAM_RAS_N;
wire DRAM_WE_N;
wire EEP_I2C_SCLK;
wire EEP_I2C_SDAT;
wire ENET0_GTX_CLK;
wire ENET0_MDC;
wire ENET0_RST_N;
wire [3:0] ENET0_TX_DATA;
wire ENET0_TX_EN;
wire ENET0_TX_ER;
wire ENET1_GTX_CLK;
wire ENET1_MDC;
wire ENET1_RST_N;
wire [3:0] ENET1_TX_DATA;
wire ENET1_TX_EN;
wire ENET1_TX_ER;
wire [6:0] EX_IO;
wire [22:0] FL_ADDR;
wire FL_CE_N;
wire [7:0] FL_DQ;
wire FL_OE_N;
wire FL_RST_N;
wire FL_WE_N;
wire FL_WP_N;
wire [35:0] GPIO;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire HSMC_CLKOUT0;
wire HSMC_CLKOUT_P1;
wire HSMC_CLKOUT_P2;
wire [3:0] HSMC_D;
wire [16:0] HSMC_TX_D_P;
wire I2C_SCLK;
wire I2C_SDAT;
wire LCD_BLON;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire [8:0] LEDG;
wire [17:0] LEDR;
wire [1:0] OTG_ADDR;
wire OTG_CS_N;
wire [15:0] OTG_DATA;
wire OTG_RD_N;
wire OTG_RST_N;
wire OTG_WR_N;
wire PS2_CLK;
wire PS2_CLK2;
wire PS2_DAT;
wire PS2_DAT2;
wire SD_CLK;
wire SD_CMD;
wire [3:0] SD_DAT;
wire SMA_CLKOUT;
wire [19:0] SRAM_ADDR;
wire SRAM_CE_N;
wire [15:0] SRAM_DQ;
wire SRAM_LB_N;
wire SRAM_OE_N;
wire SRAM_UB_N;
wire SRAM_WE_N;
wire TD_RESET_N;
wire UART_CTS;
wire UART_TXD;
wire [7:0] VGA_B;
wire VGA_BLANK_N;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC_N;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign DRAM_DQ = treg_DRAM_DQ;
assign EEP_I2C_SDAT = treg_EEP_I2C_SDAT;
assign EX_IO = treg_EX_IO;
assign FL_DQ = treg_FL_DQ;
assign GPIO = treg_GPIO;
assign HSMC_D = treg_HSMC_D;
assign I2C_SDAT = treg_I2C_SDAT;
assign LCD_DATA = treg_LCD_DATA;
assign OTG_DATA = treg_OTG_DATA;
assign PS2_CLK = treg_PS2_CLK;
assign PS2_CLK2 = treg_PS2_CLK2;
assign PS2_DAT = treg_PS2_DAT;
assign PS2_DAT2 = treg_PS2_DAT2;
assign SD_CMD = treg_SD_CMD;
assign SD_DAT = treg_SD_DAT;
assign SRAM_DQ = treg_SRAM_DQ;
DE2_115_Default i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_DQM(DRAM_DQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_WE_N(DRAM_WE_N),
	.EEP_I2C_SCLK(EEP_I2C_SCLK),
	.EEP_I2C_SDAT(EEP_I2C_SDAT),
	.ENET0_GTX_CLK(ENET0_GTX_CLK),
	.ENET0_INT_N(ENET0_INT_N),
	.ENET0_LINK100(ENET0_LINK100),
	.ENET0_MDC(ENET0_MDC),
	.ENET0_MDIO(ENET0_MDIO),
	.ENET0_RST_N(ENET0_RST_N),
	.ENET0_RX_CLK(ENET0_RX_CLK),
	.ENET0_RX_COL(ENET0_RX_COL),
	.ENET0_RX_CRS(ENET0_RX_CRS),
	.ENET0_RX_DATA(ENET0_RX_DATA),
	.ENET0_RX_DV(ENET0_RX_DV),
	.ENET0_RX_ER(ENET0_RX_ER),
	.ENET0_TX_CLK(ENET0_TX_CLK),
	.ENET0_TX_DATA(ENET0_TX_DATA),
	.ENET0_TX_EN(ENET0_TX_EN),
	.ENET0_TX_ER(ENET0_TX_ER),
	.ENET1_GTX_CLK(ENET1_GTX_CLK),
	.ENET1_INT_N(ENET1_INT_N),
	.ENET1_LINK100(ENET1_LINK100),
	.ENET1_MDC(ENET1_MDC),
	.ENET1_MDIO(ENET1_MDIO),
	.ENET1_RST_N(ENET1_RST_N),
	.ENET1_RX_CLK(ENET1_RX_CLK),
	.ENET1_RX_COL(ENET1_RX_COL),
	.ENET1_RX_CRS(ENET1_RX_CRS),
	.ENET1_RX_DATA(ENET1_RX_DATA),
	.ENET1_RX_DV(ENET1_RX_DV),
	.ENET1_RX_ER(ENET1_RX_ER),
	.ENET1_TX_CLK(ENET1_TX_CLK),
	.ENET1_TX_DATA(ENET1_TX_DATA),
	.ENET1_TX_EN(ENET1_TX_EN),
	.ENET1_TX_ER(ENET1_TX_ER),
	.ENETCLK_25(ENETCLK_25),
	.EX_IO(EX_IO),
	.FL_ADDR(FL_ADDR),
	.FL_CE_N(FL_CE_N),
	.FL_DQ(FL_DQ),
	.FL_OE_N(FL_OE_N),
	.FL_RST_N(FL_RST_N),
	.FL_RY(FL_RY),
	.FL_WE_N(FL_WE_N),
	.FL_WP_N(FL_WP_N),
	.GPIO(GPIO),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.HSMC_CLKIN0(HSMC_CLKIN0),
	.HSMC_CLKIN_P1(HSMC_CLKIN_P1),
	.HSMC_CLKIN_P2(HSMC_CLKIN_P2),
	.HSMC_CLKOUT0(HSMC_CLKOUT0),
	.HSMC_CLKOUT_P1(HSMC_CLKOUT_P1),
	.HSMC_CLKOUT_P2(HSMC_CLKOUT_P2),
	.HSMC_D(HSMC_D),
	.HSMC_RX_D_P(HSMC_RX_D_P),
	.HSMC_TX_D_P(HSMC_TX_D_P),
	.I2C_SCLK(I2C_SCLK),
	.I2C_SDAT(I2C_SDAT),
	.IRDA_RXD(IRDA_RXD),
	.KEY(KEY),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.OTG_ADDR(OTG_ADDR),
	.OTG_CS_N(OTG_CS_N),
	.OTG_DATA(OTG_DATA),
	.OTG_INT(OTG_INT),
	.OTG_RD_N(OTG_RD_N),
	.OTG_RST_N(OTG_RST_N),
	.OTG_WR_N(OTG_WR_N),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.SD_CLK(SD_CLK),
	.SD_CMD(SD_CMD),
	.SD_DAT(SD_DAT),
	.SD_WP_N(SD_WP_N),
	.SMA_CLKIN(SMA_CLKIN),
	.SMA_CLKOUT(SMA_CLKOUT),
	.SRAM_ADDR(SRAM_ADDR),
	.SRAM_CE_N(SRAM_CE_N),
	.SRAM_DQ(SRAM_DQ),
	.SRAM_LB_N(SRAM_LB_N),
	.SRAM_OE_N(SRAM_OE_N),
	.SRAM_UB_N(SRAM_UB_N),
	.SRAM_WE_N(SRAM_WE_N),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.TD_DATA(TD_DATA),
	.TD_HS(TD_HS),
	.TD_RESET_N(TD_RESET_N),
	.TD_VS(TD_VS),
	.UART_CTS(UART_CTS),
	.UART_RTS(UART_RTS),
	.UART_RXD(UART_RXD),
	.UART_TXD(UART_TXD),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS)
);

// CLOCK2_50
always
begin
	CLOCK2_50 = 1'b0;
	CLOCK2_50 = #10000 1'b1;
	#10000;
end 

// CLOCK3_50
always
begin
	CLOCK3_50 = 1'b0;
	CLOCK3_50 = #10000 1'b1;
	#10000;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

DE2_115_Default_vlg_sample_tst tb_sample (
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACLRCK(AUD_DACLRCK),
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK_50(CLOCK_50),
	.DRAM_DQ(DRAM_DQ),
	.EEP_I2C_SDAT(EEP_I2C_SDAT),
	.ENET0_INT_N(ENET0_INT_N),
	.ENET0_LINK100(ENET0_LINK100),
	.ENET0_MDIO(ENET0_MDIO),
	.ENET0_RX_CLK(ENET0_RX_CLK),
	.ENET0_RX_COL(ENET0_RX_COL),
	.ENET0_RX_CRS(ENET0_RX_CRS),
	.ENET0_RX_DATA(ENET0_RX_DATA),
	.ENET0_RX_DV(ENET0_RX_DV),
	.ENET0_RX_ER(ENET0_RX_ER),
	.ENET0_TX_CLK(ENET0_TX_CLK),
	.ENET1_INT_N(ENET1_INT_N),
	.ENET1_LINK100(ENET1_LINK100),
	.ENET1_MDIO(ENET1_MDIO),
	.ENET1_RX_CLK(ENET1_RX_CLK),
	.ENET1_RX_COL(ENET1_RX_COL),
	.ENET1_RX_CRS(ENET1_RX_CRS),
	.ENET1_RX_DATA(ENET1_RX_DATA),
	.ENET1_RX_DV(ENET1_RX_DV),
	.ENET1_RX_ER(ENET1_RX_ER),
	.ENET1_TX_CLK(ENET1_TX_CLK),
	.ENETCLK_25(ENETCLK_25),
	.EX_IO(EX_IO),
	.FL_DQ(FL_DQ),
	.FL_RY(FL_RY),
	.GPIO(GPIO),
	.HSMC_CLKIN0(HSMC_CLKIN0),
	.HSMC_CLKIN_P1(HSMC_CLKIN_P1),
	.HSMC_CLKIN_P2(HSMC_CLKIN_P2),
	.HSMC_D(HSMC_D),
	.HSMC_RX_D_P(HSMC_RX_D_P),
	.I2C_SDAT(I2C_SDAT),
	.IRDA_RXD(IRDA_RXD),
	.KEY(KEY),
	.LCD_DATA(LCD_DATA),
	.OTG_DATA(OTG_DATA),
	.OTG_INT(OTG_INT),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.SD_CMD(SD_CMD),
	.SD_DAT(SD_DAT),
	.SD_WP_N(SD_WP_N),
	.SMA_CLKIN(SMA_CLKIN),
	.SRAM_DQ(SRAM_DQ),
	.SW(SW),
	.TD_CLK27(TD_CLK27),
	.TD_DATA(TD_DATA),
	.TD_HS(TD_HS),
	.TD_VS(TD_VS),
	.UART_RTS(UART_RTS),
	.UART_RXD(UART_RXD),
	.sampler_tx(sampler)
);

DE2_115_Default_vlg_check_tst tb_out(
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_DQM(DRAM_DQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_WE_N(DRAM_WE_N),
	.EEP_I2C_SCLK(EEP_I2C_SCLK),
	.EEP_I2C_SDAT(EEP_I2C_SDAT),
	.ENET0_GTX_CLK(ENET0_GTX_CLK),
	.ENET0_MDC(ENET0_MDC),
	.ENET0_RST_N(ENET0_RST_N),
	.ENET0_TX_DATA(ENET0_TX_DATA),
	.ENET0_TX_EN(ENET0_TX_EN),
	.ENET0_TX_ER(ENET0_TX_ER),
	.ENET1_GTX_CLK(ENET1_GTX_CLK),
	.ENET1_MDC(ENET1_MDC),
	.ENET1_RST_N(ENET1_RST_N),
	.ENET1_TX_DATA(ENET1_TX_DATA),
	.ENET1_TX_EN(ENET1_TX_EN),
	.ENET1_TX_ER(ENET1_TX_ER),
	.EX_IO(EX_IO),
	.FL_ADDR(FL_ADDR),
	.FL_CE_N(FL_CE_N),
	.FL_DQ(FL_DQ),
	.FL_OE_N(FL_OE_N),
	.FL_RST_N(FL_RST_N),
	.FL_WE_N(FL_WE_N),
	.FL_WP_N(FL_WP_N),
	.GPIO(GPIO),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.HSMC_CLKOUT0(HSMC_CLKOUT0),
	.HSMC_CLKOUT_P1(HSMC_CLKOUT_P1),
	.HSMC_CLKOUT_P2(HSMC_CLKOUT_P2),
	.HSMC_D(HSMC_D),
	.HSMC_TX_D_P(HSMC_TX_D_P),
	.I2C_SCLK(I2C_SCLK),
	.I2C_SDAT(I2C_SDAT),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.OTG_ADDR(OTG_ADDR),
	.OTG_CS_N(OTG_CS_N),
	.OTG_DATA(OTG_DATA),
	.OTG_RD_N(OTG_RD_N),
	.OTG_RST_N(OTG_RST_N),
	.OTG_WR_N(OTG_WR_N),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2),
	.SD_CLK(SD_CLK),
	.SD_CMD(SD_CMD),
	.SD_DAT(SD_DAT),
	.SMA_CLKOUT(SMA_CLKOUT),
	.SRAM_ADDR(SRAM_ADDR),
	.SRAM_CE_N(SRAM_CE_N),
	.SRAM_DQ(SRAM_DQ),
	.SRAM_LB_N(SRAM_LB_N),
	.SRAM_OE_N(SRAM_OE_N),
	.SRAM_UB_N(SRAM_UB_N),
	.SRAM_WE_N(SRAM_WE_N),
	.TD_RESET_N(TD_RESET_N),
	.UART_CTS(UART_CTS),
	.UART_TXD(UART_TXD),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

